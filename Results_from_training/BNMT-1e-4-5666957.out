
================
== TensorFlow ==
================

NVIDIA Release 22.03-tf2 (build 33659467)
TensorFlow Version 2.8.0

Container image Copyright (c) 2022, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
Copyright 2017-2022 The TensorFlow Authors.  All rights reserved.

Various files include modifications (c) NVIDIA CORPORATION & AFFILIATES.  All rights reserved.

This container image and its contents are governed by the NVIDIA Deep Learning Container License.
By pulling and using the container, you accept the terms and conditions of this license:
https://developer.nvidia.com/ngc/nvidia-deep-learning-container-license

NOTE: CUDA Forward Compatibility mode ENABLED.
  Using CUDA 11.6 driver version 510.47.03 with kernel driver version 470.82.01.
  See https://docs.nvidia.com/deploy/cuda-compatibility/ for details.

Wie wir morgen leben, entscheidet sich hier und jetzt.	Wie unser Leben in Zukunft ist, entscheiden wir jetzt.

Wir sehen gerade.	Im Moment sehen wir

solidarische Gesellschaft	Gesellschaft für alle

gut funktionierender Staat	Staat, der gut helfen kann

öffentliche Investitionen in Infrastruktur	Geld für die öffentliche Infrastruktur

Wissenschaft und Forschung	Wissenschaft und Forschung

kraftvolle Wirtschaft	starke Wirtschaft

starkes, souveränes Europa	starkes Europa

zukunftsfähige Arbeitsplätze	Arbeits-Plätze für die Zukunft

der Kampf gegen den Klimawandel	Kampf gegen den Klima-Wandel

lebenswerte Zukunft	lebenswerte Zukunft

Gesellschaft des Respekts 	Gesellschaft, in der alle gut miteinander leben

souveränes Europa in der Welt	starkes Europa in der Welt

Das ist unser Angebot, das Zukunftsprogramm.	Wir wollen diese Dinge erreichen. Oder noch besser machen. Dafür haben wir unser Wahl-Programm geschrieben. Es hat den Namen Zukunfts-Programm.

Olaf Scholz wird mit einer Zukunftsregierung unser Land nach vorne bringen. Mit einer Regierung, die sich etwas vornimmt.	Olaf Scholz will in den nächsten Jahren die Regierung von Deutschland leiten. Er will als Bundes-Kanzler der Chef von der Regierung sein. Und viele Dinge aus dem Zukunfts-Programm umsetzen.

Wir überschreiten gerade die Schwelle zu einer neuen Zeit – nicht nur wegen der Erfahrungen und Folgen der Pandemie.	Für uns beginnt gerade eine neue Zeit. Der Grund dafür ist nicht nur die Corona-Pandemie.

Pandemie	Diese Krankheit gibt es in fast allen Ländern auf der Welt.

Mit dem dringend notwendigen Klimaschutz verändert sich unsere Energieversorgung, wie wir produzieren und konsumieren. 	Auch der Klima-Schutz wird unser Leben stark verändern. Es wird sich Dinge ändern, wie zum Beispiel, wie wir unsere Energie herstellen, wie wir Waren herstellen, wie wir Waren benutzen.

Unsere Kinder und Enkel sollen noch eine Welt haben, in der sie leben können	Auch unsere Kinder und Enkel sollen später ein gutes Leben haben. Und ihr eigenes Geld verdienen können. Sie sollen auch friedlich mit anderen Menschen zusammen leben können. Und sie sollen gesund leben können.

Bundestag	Der Bundes-Tag ist eine große Gruppe von Frauen und Männern, die Abgeordnete heißen.

Nicht irgendwie, sondern gesund, in Wohlstand und Frieden. 	Sie sollen auch friedlich mit anderen Menschen zusammen leben können. Und sie sollen gesund leben können.

Darum wollen wir, dass Deutschland der erfolgreiche Wirtschaftsstandort mit guten Arbeitsplätzen bleibt. 	Deutschland soll ein guter Wirtschafts-Standort mit guten Plätze, wo man arbeiten kann, bleiben.

Dafür werden wir in Wissenschaft, Forschung und die Entwicklung modernster Technologien investieren und Produkte anbieten, die überall auf der Welt gebraucht werden 	Dafür brauchen wir gute Wissenschaftlerinnen und Wissenschaftler. Diese Fach-Leute müssen wir noch besser ausbilden. Die Wissenschaftlerinnen und Wissenschaftler erfinden immer wieder moderne Technik. Die Technik kann uns die Arbeit leichter machen. Und uns auch generell im Leben helfen. Und diese moderne Technik brauchen auch andere Länder

Wir wollen uns der Digitalisierung nicht unterwerfen, sondern sie nutzen, damit sie das Leben besser und leichter macht.	Wir wollen die Digitalisierung gut nutzen. Das heißt: Mit der Digitalisierung soll unser Leben einfacher werden.

Und wir brauchen ein Gesundheitssystem, das beste medizinische Versorgung für alle bietet.	Wir wollen für ein gutes Gesundheits-System sorgen. Alle Bürgerinnen und Bürger müssen eine gute medizinische Versorgung bekommen.

Dafür werden wir Geld in die Hand nehmen, kräftig investieren.	Diese Veränderungen sind notwendig. Sie kosten aber auch viel Geld. Wir müssen das Geld dafür aber ausgeben.

 Aber nicht die Bürger*innen mit normalen und kleinen Einkommen sollen das  bezahlen. Sie leisten längst genug, daher wollen wir für die große Mehrheit die Steuern senken.	Die Veränderungen sollen aber nicht Menschen mit wenig Geld bezahlen. Diese Menschen sollen sogar weniger Steuern zahlen müssen. Denn sie bezahlen schon genug für die Gesellschaft.

 Wer ein sehr hohes Einkommen hat, kann aber mehr leisten.	Das meiste Geld sollen reiche Menschen bezahlen. Denn sie haben dafür genug Geld. Und können mehr Steuern zahlen.

Das gilt auch für globale Digitalkonzerne, die sehr viel Geld verdienen, oft aber kaum Steuern zahlen.	Auch reiche Konzerne sollen mehr Steuern zahlen. Das sind sehr reiche Firmen. Sie machen überall auf der Welt Geschäfte. Sie zahlen aber nur sehr wenig Steuern.

Wir denken die großen Aufgaben zusammen – nur so entsteht das ganze Bild. Es sind die Zukunftsmissionen von Olaf Scholz, unserem Kanzlerkandidaten.	Wir denken: Man muss alle Aufgaben zusammen anschauen. Der Grund dafür ist: Die meisten Aufgaben hängen zusammen. Nur so kann man wirklich gute Lösungen finden. Olaf Scholz wird gute Lösungen finden. Davon sind wir überzeugt. Olaf Scholz ist unser Kanzler-Kandidat.

Mobilität	Mobilität ist ein anderes Wort für: Von einem Ort zu einem anderen kommen.

Schnell und zuverlässig von A nach B kommen	Alle Menschen sollen schnell und sicher von einem Ort zum anderen kommen.

Wir fördern die Entwicklung und Produktion von E-Autos und wollen mindestens 15 Millionen in diesem Jahrzehnt in Deutschland auf die Straße bringen	Wir wollen mehr und bessere Elektro-Autos in Deutschland. Dafür fördern wir die Entwicklung von Elektro-Autos. Ein Elektro-Auto braucht kein Benzin zum Fahren. Es fährt mit Strom aus einer Batterie. Bis 2030 sollen mindestens 15 Millionen Elektro-Autos in Deutschland fahren. 

Mit einem Mobilitätsplan 2030 wollen wir vor allem dem öffentlichen Nahverkehr und dem Schienenverkehr einen kräftigen Schub geben.	Dafür machen wir einen Mobilitäts-Plan. Wir nennen ihn Mobilitäts-Plan 2030. Die Ziele aus dem Plan wollen wir bis 2030 erreichen. Wir wollen den öffentlichen Nah-Verkehr besser machen Das heißt: Mehr Menschen sollen mit dem Zug oder dem Bus fahren.

Bahnfahren durch ganz Europa soll zukünftig günstiger und attraktiver als Fliegen sein 	Wir wollen den Schienen-Verkehr besser machen Das heißt: Man soll besser mit dem Zug überall in Europa hinfahren können. Und die Preise dafür sollen auch billiger werden. Wir wollen: Die Menschen sollen lieber mit dem Zug fahren als Fliegen.

Wir sorgen dafür, dass bis zum Jahr 2040 unser Strom vollständig aus erneuerbaren Energien, vor allem Wind und Sonne, kommt.	Unser Ziel ist: Bis zum Jahr 2040 soll der komplette Strom von Erneuerbaren Energien kommen. Erneuerbare Energie ist zum Beispiel Strom, der aus Wind gemacht wird. Oder Strom, der aus Wasser gemacht wird. 

Bis spätestens 2045 soll Deutschland klimaneutral sein.	Bis zum Jahr 2045 soll Deutschland klimaneutral sein. Klimaneutral heißt: Das Klima verschlechtert sich nicht durch irgendetwas, was die Menschen tun. Schlecht für das Klima ist zum Beispiel das: Strom, der aus Kohle gemacht wird. Deshalb wird es mit uns mehr Erneuerbare Energien geben.

Dafür machen wir Tempo beim Ausbau der Erneuerbaren Energien und der Stromnetze	Und auch die Digitalisierung vom Strom-Netz wollen wir besser machen. Das Strom-Netz sind die Kabel, die den Strom überall hinbringen. 

Wir brauchen neue Stromspeicher und eine nachhaltige Wasserstoffproduktion.	Der Strom soll auch besser gespeichert werden können. Zum Beispiel für Tage, an denen kein Wind weht. Oder keine Sonne scheint. Dafür werden wir neue Lösungen schaffen. Wir wollen auch die Herstellung von Wasser-Stoff besser machen. Auch mit Wasser-Stoff kann man Strom machen. Und die Umwelt wird dabei nicht zerstört

Der Ausbau von Erneuerbaren Energien bringt auch neue, gut bezahlte Arbeitsplätze	Durch die erneuerbaren Energien gibt es auch neue Arbeits-Plätze. Und die Arbeits-Plätze sind gut bezahlt.

Digitale Souveränität in Deutschland und Europa	Digitale Unabhängigkeit für Deutschland und Europa

Eine digitale Infrastruktur für Deutschland auf Weltniveau – bis 2030. Das ist unser Anspruch.	Die Digitalisierung in Deutschland muss besser werden. Wir wollen: Deutschland soll bei der Digitalisierung in der Welt ganz vorne sein. Das wollen wir bis zum Jahr 2030 erreichen.

Eine Verwaltung, die den Bürgerinnen und Bürgern einfachen, digitalen Zugang zu ihren Leistungen ermöglich	Die Verwaltung soll ganz digital werden. Verwaltung bedeutet zum Beispiel: Alle Ämter und Behörden. Das heißt: Man soll bei den Ämtern alles von zu Hause aus machen können. Man soll alles über das Internet machen können.

digital erstklassig ausgestattete Schulen;	Alle Schulen sollen eine sehr gute digitale Ausstattung bekommen. Das heißt zum Beispiel: Jede Schule soll genug moderne Computer haben. Und eine schnelle Verbindung zum Internet haben.

schneller, sicherer und bezahlbarer Internetzugang für alle: die „Gigabit-Gesellschaft“	Alle Menschen sollen eine schnelle und sichere Internet-Verbindung haben. Das soll für sie auch nicht viel Geld kosten. Alle sollen ohne Probleme das Internet benutzen können. Wir nennen unser Ziel Gigabit-Gesellschaft.

wir beenden die Zweiklassenmedizin durch die Einführung einer solidarischen Bürgerversicherung, in der alle gleich gut behandelt werden.	Wir werden eine solidarische Bürger-Versicherung einführen. Das heißt: Alle Menschen werden gleich gut behandelt.

Wir wollen höhere Löhne für Pflegekräfte.	Pflegerinnen und Pfleger sollen einen besseren Lohn bekommen.

Wir werden den Eigenanteil für Pflegebedürftige mit kleinen und mittleren Einkommen deckeln	Hat ein Mensch nicht so viel Geld? Und braucht aber Pflege? Dann soll er dafür nicht zu viel bezahlen müssen. Dafür werden wir ein Gesetz machen.

Wir wollen Familien besser unterstützen. Durch eine Kindergrundsicherung, die aus Geld und besseren Bildungs- und Freizeitangeboten für alle Kinder besteht	Wir wollen Familien besser unterstützen. Deshalb wollen wir eine Kinder-Grund-Sicherung einführen. Das ist eine Hilfe mit Geld und die Kinder bekommen die beste Bildung und Freizeitaktivitäten.

Wir führen freie Fahrt für Kinder in Bussen und Bahnen im Nahverkehr ein.	Die Kinder dürfen im Bus und im Zug kostenlos fahren.

Arbeit darf ihren Wert im Alter nicht verlieren. Wer gearbeitet hat, soll auch im Alter den gewohnten Lebensstandard halten können.	Arbeit muss sich auch lohnen, wenn man älter ist. Damit meinen wir die Zeit, wenn man Rente bekommt. Und nicht mehr arbeiten muss. Hat ein Mensch immer gearbeitet? Dann soll er sich auch in der Rente alles leisten können.

Eine Anhebung des gesetzlichen Rentenalters wird es mit uns nicht geben.	Wir werden auch das Renten-Alter nicht erhöhen. Renten-Alter heißt: Ab diesem Alter muss man nicht mehr arbeiten und bekommt Rente. Dieses Alter wird mit uns nicht steigen.

Respekt drückt sich auch in einer Gesellschaft aus, die inklusiv und solidarisch ist, die individuelle Lebenslagen anerkennt und es allen möglich macht, am gesellschaftlichen Leben teilzunehmen.	Die Menschen in der Gesellschaft respektieren sich auch. Das heißt zum Beispiel: Sie gehen gut miteinander um. Und sie nehmen die Meinung von jedem Menschen ernst. Jeder Mensch ist gleich viel wert und soll hier so leben könne, wie er will. Und wer anders ist soll deswegen keinen Nachteil haben

gerechte Löhne	Jeder Mensch soll von seiner Arbeit gut leben können.

gerechte Mieten	Jeder Mensch soll eine Wohnung finden können. Und die Miete dafür bezahlen können. Auch, wenn er nicht so viel Geld hat.

sichere Rente	Hat man immer gearbeitet? Dann soll man eine Rente bekommen. Und man soll mit dem Geld gut leben können

gute Pflege	Braucht ein Mensch Pflege? Dann muss er sie auch bekommen können. Und muss sie auch bezahlen können. 

Diskriminieren	Ein Mensch wird schlechter behandelt als ein anderer Mensch. Obwohl es ungerecht ist.

Arbeit ist für viele Bürgerinnen und Bürger identitätsstiftend.	Arbeit ist für viele Menschen sehr wichtig. Und sie sind stolz auf ihre Arbeit.

Jede Arbeit muss ordentlich entlohnt werden.	Man muss von dem Geld leben können. Egal, was man für eine Arbeit macht

Für jede Arbeit muss man einen gerechten Lohn bekommen	Man muss von dem Geld leben können. Egal, was man für eine Arbeit macht

Wir werden die Garantie auf einen Ausbildungsplatz und das Recht auf Weiterbildung und einen beruflichen Neustart schaffen. 	Jeder Mensch soll einen Beruf lernen können, der ihm gefällt. Und die Möglichkeit haben, in seinem Beruf besser zu werden.

Wohnen ist Menschenrecht	Jeder Mensch hat das Recht auf eine Wohnung.

Wir schaffen mehr Wohnraum durch den Bau von jährlich 400.000 Wohnungen, davon sind 100.000 öffentlich gefördert. Diese Wohnungen sollen von jedem bezahlbar sein	Der Staat muss mehr Wohnungen bauen. Das Fach-Wort für solche Wohnungen ist Sozial-Wohnungen. Wir werden jedes Jahr 100-Tausend Sozial-Wohnungen bauen. Und wir werden jedes Jahr noch 300-Tausend 

Der Anstieg der Mieten wird gebremst, indem Mieten in angespannten Wohnlagen zeitlich befristet nur in der Höhe der Inflationsrate steigen dürfen.	Die Mieten dürfen nicht so schnell teurer werden. Dafür werden wir neue Gesetze machen. Das werden wir dort machen, wo Mieten besonders schnell teurer werden. 

Wir stehen für eine offene und gerechte Gesellschaft, in der alle gleiche Chancen haben – frei von Diskriminierung, unabhängig von Herkunft, Geschlecht, Religion, Behinderung oder von sexueller Orientierung	Wir wollen: Alle Menschen sollen die gleichen Chancen und Möglichkeiten haben. Und die Gesellschaft soll offen und gerecht sein. Das heißt: Alle Menschen sollen gut miteinander umgehen. Niemand soll angegriffen werden, weil er anders ist. Vor allem darf kein Mensch deswegen schlechter behandelt werden, weil er anders ist.

Wir werden dafür sorgen, dass in Führungspositionen genauso viele Frauen wie Männer arbeiten	Es sollen genauso viele Frauen wie Männer Politik machen.

Wir werden dafür sorgen, dass Vereine, Projekte und Initiativen, die sich gegen Rassismus und Rechtsextremismus einsetzen, dauerhaft gefördert werden, statt immer wieder neu Fördergelder beantragen zu müssen. 	Besonders unterstützen wollen wir solche Vereine, Projekte und Gruppen, die sich gegen Rassismus und Rechts-Extremismus einsetzen. Rassismus heißt: Menschen behandeln andere Menschen schlecht. Und hassen sie sogar. Rechts-Extremismus ist so ähnlich wie Rassismus.

Dialog	Miteinander über Dinge zu sprechen.

Vieles, was in Europa richtig ist, gilt auch darüber hinaus: gemeinsam große Aufgaben annehmen und lösen.	Wir machen in Europa viele Dinge richtig. Aber viele Aufgaben sind auch für die ganze Welt wichtig. Auch diese Aufgaben müssen wir zusammen lösen.

Initializing from scratch!
(1, 128)
tf.Tensor(
[[8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
  8794 8794]], shape=(1, 128), dtype=int64)
tf.Tensor([0], shape=(1,), dtype=int64)
[ P A D ]
Model: "nmt_model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 tf_bert_model (TFBertModel)  multiple                 109081344 
                                                                 
 embedding (Embedding)       multiple                  0 (unused)
                                                                 
 nmt_encoder_layer (NMTEncod  multiple                 6300928   
 erLayer)                                                        
                                                                 
 nmt_encoder_layer_1 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_2 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_3 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_4 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_5 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_6 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_7 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_8 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_9 (NMTEnc  multiple                 6300928   
 oderLayer)                                                      
                                                                 
 nmt_encoder_layer_10 (NMTEn  multiple                 6300928   
 coderLayer)                                                     
                                                                 
 nmt_encoder_layer_11 (NMTEn  multiple                 6300928   
 coderLayer)                                                     
                                                                 
 embedding_1 (Embedding)     multiple                  23040000  
                                                                 
 nmt_decoder_layer (NMTDecod  multiple                 8666368   
 erLayer)                                                        
                                                                 
 nmt_decoder_layer_1 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_2 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_3 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_4 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_5 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_6 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_7 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_8 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_9 (NMTDec  multiple                 8666368   
 oderLayer)                                                      
                                                                 
 nmt_decoder_layer_10 (NMTDe  multiple                 8666368   
 coderLayer)                                                     
                                                                 
 nmt_decoder_layer_11 (NMTDe  multiple                 8666368   
 coderLayer)                                                     
                                                                 
 dense_288 (Dense)           multiple                  23070000  
                                                                 
 softmax (Softmax)           multiple                  0         
                                                                 
=================================================================
Total params: 334,798,896
Trainable params: 334,798,896
Non-trainable params: 0
_________________________________________________________________
(1, 128)
tf.Tensor([0], shape=(1,), dtype=int64)
[ P A D ]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Die Adresse von Ihrer E-Mail.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702  8794 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702  8794 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702  8794 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702  8794 28702 28702 28702]
tf.Tensor([b'In was f\xc3\xbcr eine Beziehung sind Sie im Moment.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Ihr Partner/Ihre Partnerin ist gestorben.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Sie sind Sch\xc3\xbclerin/Sch\xc3\xbcler, oder Studentin/Student, der Auszubildende/Auszubildender.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'"In Ihrer Wohnung leben noch ... (Zahl) weitere Personen, die Sie nicht unter Nummer 2 genannt haben. Diese Personen geh\xc3\xb6ren nicht zu Ihrer ""Bedarfgemeinschaft"". Wenn darunter Personen sind, die zu Ihrer weiteren Familie geh\xc3\xb6ren (zum Beispiel Ihre Tante oder der Bruder Ihrer Frau), f\xc3\xbcllen Sie bitte das Formular Anlage HG aus."\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Sie sind schwanger.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Bitte legen Sie ein Papier dazu, wo steht, dass richtig ist, was Sie schreiben.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Wissenschaft und Forschung\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794 8794
 8794 8794]
tf.Tensor([b'Der Bundes-Tag ist eine gro\xc3\x9fe Gruppe von Frauen und M\xc3\xa4nnern, die Abgeordnete hei\xc3\x9fen.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Das meiste Geld sollen reiche Menschen bezahlen. Denn sie haben daf\xc3\xbcr genug Geld. Und k\xc3\xb6nnen mehr Steuern zahlen.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576 9576
 9576 9576]
tf.Tensor([b'Der Staat muss mehr Wohnungen bauen. Das Fach-Wort f\xc3\xbcr solche Wohnungen ist Sozial-Wohnungen. Wir werden jedes Jahr 100-Tausend Sozial-Wohnungen bauen. Und wir werden jedes Jahr noch 300-Tausend \n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Er ist sehr nett, aber ich mag ihn nicht.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
Output [28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702 28702
 28702 28702 28702 28702 28702 28702 28702 28702]
tf.Tensor([b'Eine Steuer ist eine Geb\xc3\xbchr, die von Menschen verlangt wird, die in einem bestimmten Land leben oder von Ausl\xc3\xa4ndern. Sie wird verwendet, um Geld f\xc3\xbcr \xc3\xb6ffentliche Aufgaben zu sammeln.\n'], shape=(1,), dtype=string)
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
